@page "/login"
@using System.Net.Http.Json
@using System.Security.Cryptography
@using System.Text
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<div class="card" style="max-width: 400px;">
    <div class="card-body">
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@isBusy">
                @if (isBusy)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Logging in...</span>
                }
                else
                {
                    <span>Login</span>
                }
            </button>
        </EditForm>
    </div>
</div>

@if (!string.IsNullOrEmpty(loginMessage))
{
    <div class="alert @messageCssClass mt-3" role="alert">
        @loginMessage
    </div>
}


@code {
    private LoginModel loginModel = new();
    private object _lock = new();
    private bool isBusy = false;
    private string? loginMessage;
    private string messageCssClass = "alert-info";

    // This model holds the form data
    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        bool taken = false;
        try
        {
            Monitor.TryEnter(_lock, 0, ref taken);

            if (taken)
            {
                isBusy = true;
                loginMessage = null;
                var requestPayload = new
                {
                    Username = loginModel.Username,
                    PasswordHash = ComputeSha256Hash(loginModel.Password)
                };

                HttpResponseMessage response = await Http.PostAsJsonAsync("/Auth/Login", requestPayload);
                if (response.IsSuccessStatusCode)
                {
                    messageCssClass = "alert-success";
                    loginMessage = "Login Successful!";
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.TooManyRequests)
                {
                    messageCssClass = "alert-danger";
                    loginMessage = "Login Failed: Too many requests, please try again later.";
                }
                else
                {
                    messageCssClass = "alert-danger";
                    loginMessage = "Login Failed: Invalid username or password.";
                }
            }
        }
        catch (Exception ex)
        {
            messageCssClass = "alert-danger";
            loginMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            if (taken)
            {
                isBusy = false;
                Monitor.Exit(_lock);
            }
        }
    }

    private static string ComputeSha256Hash(string rawData)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));

            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }
}