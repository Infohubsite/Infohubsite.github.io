@inherits LayoutComponentBase
@implements IDisposable
@inject IAccountManagement Acct
@inject ILocalStorageService LS
@inject INotificationService NS
@inject ISnackbar Snackbar
@inject NavigationManager NM

<CascadingAuthenticationState>
    <MudThemeProvider @bind-IsDarkMode="darkMode" />
    <MudDialogProvider />
    <MudSnackbarProvider />

    <MudLayout>
        <AuthorizeView>
            <Authorized>
                @{
                    var navLinks = adminActive ? adminNavLinks : userNavLinks;
                }
                <MudAppBar Elevation="1">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(() => drawer = !drawer)" Class="d-md-none" />

                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        @foreach (var link in navLinks)
                        {
                            <MudButton Href="@link.Href" Variant="Variant.Text" Color="Color.Inherit" Style="margin: 0px 5px 0px 5px;">@link.Text</MudButton>
                        }
                    </MudHidden>

                    <MudSpacer />

                    @if (context.User.IsInRole("admin"))
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.AdminPanelSettings" Color="Color.Inherit" OnClick="ToggleAdminMode" />
                    }

                    <MudIconButton Icon="@(darkMode? Icons.Material.Filled.WbSunny : Icons.Material.Filled.Brightness4)" Color="Color.Inherit" OnClick="ToggleThemeAsync" />
                    <MudButton Variant="Variant.Text" Color="Color.Inherit" OnClick="LogoutAsync" StartIcon="@Icons.Material.Filled.Logout" Style="margin-left: 5px">Logout</MudButton>
                </MudAppBar>

                <MudDrawer @bind-Open="drawer" Elevation="2" ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Temporary">
                    <MudNavMenu>
                        @foreach (var link in navLinks)
                        {
                            <MudNavLink Href="@link.Href" Match="@(link.Href == "/" ? NavLinkMatch.All : NavLinkMatch.Prefix)" Style="margin: 0px 5px 0px 5px;">@link.Text</MudNavLink>
                        }
                    </MudNavMenu>
                </MudDrawer>
            </Authorized>
        </AuthorizeView>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large" Class="my-4 pt-4 my-md-6 pt-md-6">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</CascadingAuthenticationState>

@code {
    private bool darkMode;
    private bool drawer = false;
    private bool adminActive = false;

    public record NavLinkInfo(string Href, string Text);

    private readonly List<NavLinkInfo> userNavLinks = new()
    {
        new("/", "Home"),
        new("/BuildInfo", "Build Info"),
        new("/RandomWord", "Random Word"),
        new("/RandomWeather", "Random Weather"),
        new("/Weather", "Weather")
    };

    private readonly List<NavLinkInfo> adminNavLinks = new()
    {
        new("/Admin/Statistics", "Statistics")
    };

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        NS.OnShow += ShowSnackbar;

        var storedTheme = await LS.GetItemAsync<string>("theme");
        darkMode = storedTheme != "light";
    }

    private void ToggleAdminMode()
    {
        adminActive = !adminActive;
        var landingPage = adminActive ? adminNavLinks.First().Href : userNavLinks.First().Href;
        NM.NavigateTo(landingPage);
    }

    private async Task ToggleThemeAsync()
    {
        darkMode = !darkMode;
        var newTheme = darkMode ? "dark" : "light";
        await LS.SetItemAsync<string>("theme", newTheme);
    }

    private async Task LogoutAsync() =>
        await Acct.LogoutAsync();

    private Task ShowSnackbar(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config => { config.CloseAfterNavigation = true; });
        return Task.CompletedTask;
    }

    public void Dispose() =>
        NS.OnShow -= ShowSnackbar;
}