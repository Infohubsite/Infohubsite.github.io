@using Frontend.Models.DTOs
@using Frontend.Models.Enums
@using System.Text.Json
@inject IEntityDefinitionService EDS
@inject IEntityInstanceService EIS
@inject INotificationService NS

<MudDialog>
    <DialogContent>
        @if (EntityDefinition == null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            @if (error != null)
            {
                <MudAlert Severity="Severity.Error" Class="my-2">@error</MudAlert>
            }

            <MudForm @ref="form" @bind-IsValid="valid" Class="mt-4">
                @foreach (var field in EntityDefinition.Fields)
                {
                    @switch (field.DataType)
                    {
                        case DataType.Text:
                            <MudTextField T="string"
                                Label="@field.Name"
                                Required="field.IsRequired"
                                RequiredError="@($"{field.Name} is required.")"
                                ValueChanged="@((string val) => OnValueChanged(field.Name, val))" />
                            break;
                        case DataType.Number:
                            <MudNumericField T="double?"
                                Label="@field.Name"
                                Required="field.IsRequired"
                                RequiredError="@($"{field.Name} is required.")"
                                ValueChanged="@((double? val) => OnValueChanged(field.Name, val))" />
                            break;
                        case DataType.Date:
                            <MudDatePicker Label="@field.Name"
                                Required="field.IsRequired"
                                RequiredError="@($"{field.Name} is required.")"
                                DateChanged="@((DateTime? val) => OnValueChanged(field.Name, val))"
                                Clearable="!field.IsRequired" />
                            break;
                        case DataType.Boolean:
                            @if (field.IsRequired)
                            {
                                <MudSwitch T="bool"
                                    Label="@field.Name"
                                    Color="Color.Primary"
                                    Checked="@GetBoolValue(field.Name)"
                                    CheckedChanged="@((bool val) => OnValueChanged(field.Name, val))" />
                            }
                            else
                            {
                                <MudSelect T="bool?" Label="@field.Name" ValueChanged="@((bool? val) => OnValueChanged(field.Name, val))">
                                    <MudSelectItem Value="(bool?)null">Not set</MudSelectItem>
                                    <MudSelectItem Value="(bool?)true">True</MudSelectItem>
                                    <MudSelectItem Value="(bool?)false">False</MudSelectItem>
                                </MudSelect>
                            }
                            break;
                        case DataType.EntityReference:
                            <MudAutocomplete T="Guid?"
                                Label="@field.Name"
                                Required="field.IsRequired"
                                RequiredError="@($"{field.Name} is required.")"
                                SearchFunc="@((searchTerm, token) => SearchInstances(field.ReferenceTargetEntityDefinitionId, searchTerm))"
                                ValueChanged="@((Guid? val) => OnValueChanged(field.Name, val))"
                                ToStringFunc="@(id => GetInstanceNameById(field.ReferenceTargetEntityDefinitionId, id))"
                                Clearable="!field.IsRequired" />
                            break;
                    }
                }
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!valid)">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Guid EntityDefinitionId { get; set; }
    [Parameter] public Guid? CurrentInstance { get; set; }
    [Parameter] public string ButtonText { get; set; } = string.Empty;

    private EntityDefinitionDto? EntityDefinition;
    private MudForm form = default!;
    private CreateInstanceDto model = new();
    private string? error;
    private bool valid;

    protected override async Task OnInitializedAsync()
    {
        EntityDefinition = await EDS.GetEntityDefinitionAsync(EntityDefinitionId);
        if (EntityDefinition == null)
            error = "Could not load the entity definition. Cannot create instance.";
        else
        {
            if (CurrentInstance.HasValue)
            {
                EntityInstanceDto? instance = await EIS.GetInstanceAsync(CurrentInstance.Value);
                if (instance != null)
                    model.Data = instance.Data
                        .ToDictionary(kvp => kvp.Key, kvp => (object?)kvp.Value);
            }

            foreach (var field in EntityDefinition.Fields.Where(f => f.IsRequired && !model.Data.ContainsKey(f.Name)))
                model.Data[field.Name] = field.DataType switch
                {
                    DataType.Boolean => false,
                    DataType.Number => (double?)null,
                    DataType.Date => (DateTime?)null,
                    DataType.EntityReference => (Guid?)null,
                    _ => string.Empty,
                };
        }
    }

    private async Task<IEnumerable<Guid?>> SearchInstances(Guid? targetDefId, string searchTerm)
    {
        if (!targetDefId.HasValue)
            return Enumerable.Empty<Guid?>();

        List<EntityInstanceDto> instances = await EIS.GetInstancesAsync(targetDefId.Value) ?? [];
        if (string.IsNullOrWhiteSpace(searchTerm))
            return instances.Select(i => (Guid?)i.Id);

        return instances
            .Where(i => GetInstanceDisplayName(i).Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Select(i => (Guid?)i.Id);
    }

    private string GetInstanceNameById(Guid? entityDefId, Guid? instanceId)
    {
        if (instanceId == null || !entityDefId.HasValue)
            return "";
        EntityInstanceDto? instance = Task.Run(() => EIS.GetInstanceAsync(instanceId.Value)).GetAwaiter().GetResult();
        return instance != null ? GetInstanceDisplayName(instance) : instanceId.Value.ToString();
    }

    private string GetInstanceDisplayName(EntityInstanceDto instance)
    {
        if (instance?.Data == null) return instance?.Id.ToString() ?? "";
        var nameKey = instance.Data.Keys.FirstOrDefault(k => k.Contains("Name", StringComparison.OrdinalIgnoreCase)) ?? instance.Data.Keys.FirstOrDefault();
        if (nameKey != null && instance.Data.TryGetValue(nameKey, out var value) && value is JsonElement json)
            return json.ToString();
        return instance.Id.ToString();
    }

    private bool GetBoolValue(string fieldName)
    {
        if (model.Data.TryGetValue(fieldName, out object? value) && value is bool boolValue)
            return boolValue;
        return false;
    }

    private void OnValueChanged(string fieldName, object? value)
    {
        bool isNullOrEmpty = value == null || (value is string s && string.IsNullOrEmpty(s));
        if (isNullOrEmpty)
            model.Data.Remove(fieldName);
        else
            model.Data[fieldName] = value;
    }

    private async Task Submit()
    {
        await form.Validate();
        if (!valid) return;

        foreach (var key in model.Data.Where(kvp => kvp.Value == null).Select(kvp => kvp.Key).ToList())
            model.Data.Remove(key);

        var (instance, response) = await EIS.CreateInstanceAsync(EntityDefinitionId, model);

        if (instance != null)
        {
            MudDialog.Close(DialogResult.Ok(instance));
            return;
        }

        if (response == null)
            error = "Failed to create instance. Did not receive a response from the server.";
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            error = $"Failed to create instance. {(await response.Content.ReadFromJsonAsync<Rsp>())?.message}";
        else
            error = $"Failed to create instance. The server responded with status: {response.StatusCode}.";
    }

    private void Cancel() => MudDialog.Cancel();

    private class Rsp { public string message { get; set; } = string.Empty; }
}