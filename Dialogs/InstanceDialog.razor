@using Frontend.Models.DTOs
@using Frontend.Models.Enums
@using System.Text.Json
@inject IEntityDefinitionService EDS
@inject IEntityInstanceService EIS
@inject INotificationService NS

<MudDialog>
    <DialogContent>
        @if (EntityDefinition == null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            @if (error != null)
            {
                <MudAlert Severity="Severity.Error" Class="my-2">@error</MudAlert>
            }

            <MudForm @ref="form" @bind-IsValid="valid" Class="mt-4">
                @foreach (FieldDefinitionDto field in EntityDefinition.Fields)
                {
                    @if (field.IsList)
                    {
                        <div class="my-4">
                            <ChipInput Label="@field.Name" Values="GetListValue(field.Name)" ValuesChanged="StateHasChanged" DataType="field.DataType" Required="field.IsRequired" ReferenceTargetEntityDefinitionId="field.ReferenceTargetEntityDefinitionId" />
                        </div>
                    }
                    else
                    {
                        <FieldDisplay FieldName="@field.Name" DataType="field.DataType" Required="field.IsRequired" @bind-Value="model.Data[field.Name]" ReferenceTargetEntityDefinitionId="field.ReferenceTargetEntityDefinitionId" />
                    }
                }
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!CheckValid())">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Guid EntityDefinitionId { get; set; }
    [Parameter] public Guid? CurrentInstance { get; set; }
    [Parameter] public string ButtonText { get; set; } = string.Empty;

    private EntityDefinitionDto? EntityDefinition;
    private MudForm form = default!;
    private CreateInstanceDto model = new();
    private string? error;
    private bool valid;

    protected override async Task OnInitializedAsync()
    {
        EntityDefinition = await EDS.GetEntityDefinitionAsync(EntityDefinitionId);
        if (EntityDefinition == null)
            error = "Could not load the entity definition. Cannot create instance.";
        else
            foreach (FieldDefinitionDto field in EntityDefinition.Fields)
                model.Data[field.Name] = field.IsList ? new List<object>() : field.DataType switch
                {
                    DataType.Boolean => field.IsRequired ? false : (bool?)null,
                    DataType.Number => (double?)null,
                    DataType.Date => (DateTime?)null,
                    DataType.EntityReference => (Guid?)null,
                    DataType.Text => string.Empty,
                    _ => null
                };
    }

    private List<object> GetListValue(string fieldName)
    {
        if (model.Data.TryGetValue(fieldName, out object? value) && value is List<object> list)
            return list;
        model.Data[fieldName] = new List<object>();
        return (List<object>)model.Data[fieldName]!;
    }

    private async Task Submit()
    {
        await form.Validate();
        if (!CheckValid()) return;

        CreateInstanceDto payload = new() { Data = new(model.Data) };

        foreach (FieldDefinitionDto field in EntityDefinition!.Fields.Where(f => !f.IsRequired))
        {
            if (!payload.Data.TryGetValue(field.Name, out object? value)) continue;

            if (value == null || ((field.IsList && value is List<object> list && list.Count == 0) || (field.DataType == DataType.Text && value is string str && string.IsNullOrWhiteSpace(str))))
                payload.Data.Remove(field.Name);
        }
        (EntityInstanceDto? instance, HttpResponseMessage? response) = await EIS.CreateInstanceAsync(EntityDefinitionId, payload);

        if (instance != null)
        {
            MudDialog.Close(DialogResult.Ok(instance));
            return;
        }

        if (response == null)
            error = "Failed to the create instance. Did not receive a response from the server.";
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            error = $"Failed to the create instance. {(await response.Content.ReadFromJsonAsync<Rsp>())?.message}";
        else
            error = $"Failed to the create instance. The server responded with status: {response.StatusCode}.";
    }

    private bool CheckValid()
    {
        if (!valid) return false;
        if (EntityDefinition == null) return false;

        foreach (FieldDefinitionDto field in EntityDefinition.Fields.Where(f => f.IsList && f.IsRequired))
            if (model.Data.TryGetValue(field.Name, out object? value) && value is List<object> list && list.Count == 0)
                return false;
        return true;
    }

    private void Cancel() => MudDialog.Cancel();

    private class Rsp { public string message { get; set; } = string.Empty; }
}