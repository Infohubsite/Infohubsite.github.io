@using Frontend.Models.DTOs
@using Frontend.Models.Enums
@using System.Text.Json
@inject IEntityDefinitionService EDS
@inject IEntityInstanceService EIS
@inject INotificationService NS

<MudDialog>
    <DialogContent>
        @if (EntityDefinition == null)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            @if (error != null)
            {
                <MudAlert Severity="Severity.Error" Class="my-2">@error</MudAlert>
            }

            <MudForm @ref="form" @bind-IsValid="valid" Class="mt-4">
                @foreach (FieldDefinitionDto field in EntityDefinition.Fields)
                {
                    @if (field.IsList)
                    {
                        <div class="my-4">
                            <ChipInput Label="@field.Name" Values="GetListValue(field.Name)" DataType="field.DataType" Required="field.IsRequired" ReferenceTargetEntityDefinitionId="field.ReferenceTargetEntityDefinitionId" />
                        </div>
                    }
                    else
                    {
                        <FieldDisplay FieldName="@field.Name" DataType="field.DataType" Required="field.IsRequired" @bind-Value="model.Data[field.Name]" ReferenceTargetEntityDefinitionId="field.ReferenceTargetEntityDefinitionId" />
                    }
                }
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!valid)">@ButtonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Guid EntityDefinitionId { get; set; }
    [Parameter] public Guid? CurrentInstance { get; set; }
    [Parameter] public string ButtonText { get; set; } = string.Empty;

    private EntityDefinitionDto? EntityDefinition;
    private MudForm form = default!;
    private CreateInstanceDto model = new();
    private string? error;
    private bool valid;

    protected override async Task OnInitializedAsync()
    {
        EntityDefinition = await EDS.GetEntityDefinitionAsync(EntityDefinitionId);
        if (EntityDefinition == null)
            error = "Could not load the entity definition. Cannot create instance.";
        else
        {
            foreach (var field in EntityDefinition.Fields)
            {
                if (field.IsRequired)
                {
                    model.Data[field.Name] = field.IsList ? new List<object>() : field.DataType switch
                        {
                            DataType.Boolean => false,
                            DataType.Number => (double?)null,
                            DataType.Date => (DateTime?)null,
                            DataType.EntityReference => (Guid?)null,
                            _ => string.Empty,
                        };
                }
            }
        }
    }

    private List<object> GetListValue(string fieldName)
    {
        if (model.Data.TryGetValue(fieldName, out object? value) && value is List<object> objList)
            return objList;
        return [];
    }

    private async Task Submit()
    {
        await form.Validate();
        if (!valid) return;

        foreach (var key in model.Data.Where(kvp => kvp.Value == null).Select(kvp => kvp.Key).ToList())
            model.Data.Remove(key);

        var (instance, response) = await EIS.CreateInstanceAsync(EntityDefinitionId, model);

        if (instance != null)
        {
            MudDialog.Close(DialogResult.Ok(instance));
            return;
        }

        if (response == null)
            error = "Failed to create instance. Did not receive a response from the server.";
        else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            error = $"Failed to create instance. {(await response.Content.ReadFromJsonAsync<Rsp>())?.message}";
        else
            error = $"Failed to create instance. The server responded with status: {response.StatusCode}.";
    }

    private void Cancel() => MudDialog.Cancel();

    private class Rsp { public string message { get; set; } = string.Empty; }
}