@page "/"
@inject IEntityDefinitionService EDS
@inject IDialogService DS
@inject INotificationService NS
@inject NavigationManager NM

<PageTitle>Entity Definitions</PageTitle>

<MudText Typo="Typo.h6">Entity Definitions</MudText>

@if (error != null)
{
    <MudAlert Severity="Severity.Error">@error</MudAlert>
}
@if (loading && error == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else if (entityDefinitions != null)
{
    <MudTable Items="entityDefinitions" Hover="true" Bordered="true" OnRowClick="(TableRowClickEventArgs<EntityDefinitionDto> args) => OpenInstance(args)" Breakpoint="Breakpoint.None">
        <ToolBarContent>
            <MudIconButton OnClick="() => Load(true)" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" Color="Color.Tertiary" />
            <AuthorizeView Roles="admin">
                <MudSpacer />
                <MudButton OnClick="() => OpenEntityDialog()" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">Create Entity</MudButton>
            </AuthorizeView>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Fields</MudTh>
            <AuthorizeView Roles="admin">
                <MudTh>Actions</MudTh>
            </AuthorizeView>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Fields" Style="max-width: 400px;">
                <MudStack Row="true" Spacing="2" AlignItems="AlignItems.Center" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                    @foreach (var field in context.Fields.Take(6))
                    {
                        <MudText>
                            <strong>@field.Name</strong> (@(field.DataType == DataType.EntityReference ? $"Entity: {GetEntityNameById(field.ReferenceTargetEntityDefinitionId)}" : field.DataType))
                        </MudText>
                    }
                </MudStack>
            </MudTd>
            <AuthorizeView Roles="admin" Context="_">
                <MudTd DataLabel="Actions">
                    <MudIconButton OnClick="() => OpenEntityDialog(context)" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ma-1" />
                    <MudIconButton OnClick="() => OpenDeleteDialog(context)" Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" Class="ma-1" />
                </MudTd>
            </AuthorizeView>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<EntityDefinitionDto>? entityDefinitions;
    private string? error;
    private bool loading;

    protected override async Task OnInitializedAsync() => await Load();

    private async Task Load(bool refresh = false)
    {
        error = null;
        loading = true;
        List<EntityDefinitionDto>? entities = await EDS.GetEntityDefinitionsAsync(refresh);
        if (entities == null)
            error = "Failed to get entity definitions";
        else
            entityDefinitions = entities;
        loading = false;
    }

    private void OpenInstance(TableRowClickEventArgs<EntityDefinitionDto> args)
    {
        if (args.Item == null)
            return;

        NM.NavigateTo($"/Instances/{args.Item.Id}");
    }

    private string GetEntityNameById(Guid? entityId)
    {
        if (entityId == null)
            return "N/A";
        return entityDefinitions?.FirstOrDefault(e => e.Id == entityId)?.Name ?? "Unknown";
    }

    // ADMIN //
    private async Task OpenEntityDialog(EntityDefinitionDto? context = null)
    {
        DialogParameters<EntityDialog> parameters = new()
        {
            { x => x.AllEntityDefinitions, entityDefinitions ?? new() },
            { x => x.CurrentEntity, context },
            { x => x.ButtonText, context == null ? "Create" : "Edit" }
        };
        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = false
        };

        IDialogReference dialog = await DS.ShowAsync<EntityDialog>(context == null ? "Create New Entity Definition" : "Edit Entity Definition", parameters, options);
        DialogResult? result = await dialog.Result;
        if (result == null || result.Canceled)
            return;

        if (context == null)
        {
            EntityDefinitionDto? newEntity = result.Data as EntityDefinitionDto;
            if (newEntity == null)
                return;

            entityDefinitions?.Add(newEntity);
        }
        else
        {
            string? newName = result.Data as string;
            if (newName == null)
                return;

            context.Name = newName;
        }
    }
    private async Task OpenDeleteDialog(EntityDefinitionDto context)
    {
        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = false
        };
        DialogParameters<ConfirmationDialog> parameters = new()
        {
            {
                x => x.Content,
                @<MudText>
                    Are you sure you want to delete the '@context.Name' entity?
                    <br />
                    <strong>This action cannot be undone</strong>
                </MudText>
            },
            { x => x.ButtonText, "Delete" },
            { x => x.ButtonColor, Color.Error },
            { x => x.ButtonStartIcon, Icons.Material.Filled.DeleteForever },
            { x => x.OnSubmit, async () => await EDS.DeleteEntityAsync(context.Id) },
            { x => x.ErrorMessage, "Failed to delete the entity definition. Maybe it is in use?"}
        };

        IDialogReference dialog = await DS.ShowAsync<ConfirmationDialog>("Confirm Deletion", parameters, options);
        DialogResult? result = await dialog.Result;
        if (result == null || result.Canceled)
            return;

        if (result.Data is bool && (bool)result.Data)
        {
            this.entityDefinitions?.Remove(context);
            await NS.Show($"Successfully deleted the '{context.Name}' entity", Severity.Success);
        }
    }
}