@page "/Admin/Definitions"
@layout AdminLayout
@inject IEntityDefinitionService EDS
@inject INotificationService NS
@inject IDialogService DS

<PageTitle>Entity Definitions</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Entity Definitions</MudText>
<MudText Class="mb-4">Manage the core data blueprints for the app</MudText>

@if (entityDefinitions == null)
{
    @if (error)
    {
        <MudAlert Severity="Severity.Error">Failed to load entity definitions</MudAlert>
    }
    else
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
}
else
{
    <MudTable Items="entityDefinitions" Striped="true" Bordered="true" Dense="true">
        <ToolBarContent>
            <MudSpacer />
            <MudButton OnClick="OpenCreateDialog" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">Create Entity</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Fields</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Fields">
                <MudStack Row="true">
                    @foreach (FieldDefinitionDto field in context.Fields)
                    {
                        <MudText><strong>@field.Name</strong> (@field.DataType)</MudText>
                    }
                </MudStack>
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ma-1" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" Class="ma-1" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private List<EntityDefinitionDto>? entityDefinitions;
    private bool error;

    protected override async Task OnInitializedAsync()
    {
        entityDefinitions = await EDS.GetEntityDefinitionsAsync();
        if (entityDefinitions == null)
            error = true;
    }

    private async Task OpenCreateDialog()
    {
        DialogParameters<CreateEntityDialog> parameters = new()
        {
            { x => x.AllEntityDefinitions, entityDefinitions ?? new() }
        };
        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            BackdropClick = false
        };

        IDialogReference dialog = await DS.ShowAsync<CreateEntityDialog>("Create New Entity", parameters, options);
        DialogResult? result = await dialog.Result;
        if (result == null || result.Canceled)
            return;

        EntityDefinitionDto? newEntity = result.Data as EntityDefinitionDto;
        if (newEntity == null)
            return;

        entityDefinitions?.Add(newEntity);
    }
}