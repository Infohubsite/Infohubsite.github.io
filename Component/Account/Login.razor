@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject IAccountManagement Acct

<PageTitle>Login</PageTitle>

<div class="mt-5">
    @if (errors)
    {
        <div style="max-width: 500px; margin-left: auto; margin-right: auto;">
            @foreach (string error in errorList)
            {
                <div class="alert alert-danger mt-3" role="alert">@error</div>
            }
        </div>
    }


    <div class="card mx-auto" style="max-width: 500px">
        <div class="card-body">
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                </div>

                <button type="submit" class="btn btn-primary" disabled="@loading">
                    <span>Login </span>
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private bool loading, errors = false;
    private string[] errorList = [];
    private LoginModel loginModel = new();
    private object _lock = new();

    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        bool taken = false;
        try
        {
            Monitor.TryEnter(_lock, 0, ref taken);

            if (taken)
            {
                loading = true;
                errors = false;
                errorList = [];

                var result = await Acct.LoginAsync(loginModel.Username, loginModel.Password);
                if (!result.Succeeded)
                {
                    errors = true;
                    errorList = result.ErrorList;
                }
            }
        }
        catch (Exception ex)
        {
            errors = true;
            errorList = [$"Unknown exception occoured: {ex}"];
        }
        finally
        {
            if (taken)
            {
                loading = false;
                Monitor.Exit(_lock);
            }
        }
    }
}