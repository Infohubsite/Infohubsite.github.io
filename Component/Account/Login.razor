@layout LoginLayout
@page "/Account/Login"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject IAccountManagement Acct

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<div class="card" style="max-width: 500px;">
    <div class="card-body">
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>

            <button type="submit" class="btn btn-primary" disabled="@(!success && !errors)">
                <span>Login </span>
                @if (!success && !errors)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                }
            </button>
        </EditForm>
    </div>
</div>

@if (success)
{
    <div class="alert alert-success mt-3" role="alert">Login successful</div>
}
@if (errors)
{
    foreach (string error in errorList)
    {
        <div class="alert alert-danger mt-3" role="alert">@error</div>
    }
}


@code {
    private bool success, errors = true;
    private string[] errorList = [];
    private LoginModel loginModel = new();
    private object _lock = new();

    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = "";

        [Required]
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        bool taken = false;
        try
        {
            Monitor.TryEnter(_lock, 0, ref taken);

            if (taken)
            {
                success = false;
                errors = false;
                errorList = [];

                var result = await Acct.LoginAsync(loginModel.Username, loginModel.Password);
                if (result.Succeeded)
                {
                    success = true;
                }
                else
                {
                    errors = true;
                    errorList = result.ErrorList;
                }
            }
        }
        catch (Exception ex)
        {
            errors = true;
            errorList = [$"Unknown exception occoured: {ex}"];
        }
        finally
        {
            if (taken)
            {
                Monitor.Exit(_lock);
            }
        }
    }
}