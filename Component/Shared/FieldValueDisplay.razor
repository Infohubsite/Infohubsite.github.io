@switch (mode)
{
    case DisplayMode.Guid:
        <GuidRenderer InstanceId="@guidr" CurrentDepth="@Depth" />
        break;

    case DisplayMode.Array:
        <span style="display: inline-flex; align-items: baseline;">
            <span>[</span>
            <span style="display: inline-flex; gap: 10px; padding: 0 4px;">
                @foreach (var item in jear)
                {
                    <FieldValueDisplay Value="@item" Depth="@Depth" />
                }
            </span>
            <span>]</span>
        </span>
        break;

    case DisplayMode.DateTime:
    case DisplayMode.PlainText:
        <span>@textr</span>
        break;

    case DisplayMode.NotSet:
        <i>(not set)</i>
        break;
}

@code {
    [Parameter, EditorRequired] public object? Value { get; set; }
    [Parameter] public int Depth { get; set; } = 0;

    private enum DisplayMode { NotSet, PlainText, DateTime, Guid, Array }
    private DisplayMode mode;

    private string? textr;
    private System.Text.Json.JsonElement.ArrayEnumerator jear;
    private Guid guidr;

    protected override void OnParametersSet()
    {
        if (Value is System.Text.Json.JsonElement je)
        {
            switch (je.ValueKind)
            {
                case System.Text.Json.JsonValueKind.String:
                    string? stringValue = je.GetString();
                    if (Guid.TryParse(stringValue, out var guid))
                    {
                        mode = DisplayMode.Guid;
                        guidr = guid;
                    }
                    else if (DateTime.TryParse(stringValue, System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeUniversal, out var dt))
                    {
                        mode = DisplayMode.DateTime;
                        textr = dt.ToShortDateString();
                    }
                    else
                    {
                        mode = DisplayMode.PlainText;
                        textr = stringValue;
                    }
                    break;
                case System.Text.Json.JsonValueKind.Number:
                case System.Text.Json.JsonValueKind.True:
                case System.Text.Json.JsonValueKind.False:
                    mode = DisplayMode.PlainText;
                    textr = je.GetRawText();
                    break;
                case System.Text.Json.JsonValueKind.Null:
                    mode = DisplayMode.NotSet;
                    break;
                case System.Text.Json.JsonValueKind.Array:
                    mode = DisplayMode.Array;
                    jear = je.EnumerateArray();
                    break;
                default:
                    mode = DisplayMode.PlainText;
                    textr = je.ToString();
                    Console.WriteLine("DISPLAY NOT SET FOR: " + textr);
                    break;
            }
        }
        else if (Value is null)
            mode = DisplayMode.NotSet;
        else
        {
            mode = DisplayMode.PlainText;
            textr = Value.ToString();
        }
    }
}